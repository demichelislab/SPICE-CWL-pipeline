cwlVersion: v1.1
class: CommandLineTool
baseCommand: [clonet]

label: |-
  Infers tumor purity and ploidy and computes corrected copy numbers, allele
  specific copy numbers and clonality of segments and SNVs.

doc: |-
  Analyzes genomic data from next-generation sequencing experiments.
  CLONETv2 offers a set of functions to compute allele specific copy number
  and clonality from segmented data leveraging heterozygous SNPs position
  pileups. The package also calculates the clonality of single nucleotide
  variants (SNVs) given read counts at mutated positions.
  The package has been developed at the laboratory of Computational and
  Functional Oncology, Department of CIBIO, University of Trento (Italy), under
  the supervision of prof Francesca Demichelis.
  References:
    Prandi et al. (2014) <doi:10.1186/s13059-014-0439-6>;
    Carreira et al. (2014) <doi:10.1126/scitranslmed.3009448>.
    Prandi et al. (2019) <https://doi.org/10.1002/cpbi.81>

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/clonet_output_map.yaml"
  ShellCommandRequirement: {}
  InlineJavascriptRequirement: {}
  LoadListingRequirement:
    loadListing: shallow_listing

hints:
  DockerRequirement:
    dockerPull: demichelislab/clonetv2:latest

inputs:
  segfile:
    doc: |-
      The file containing the copy number segments of the analyzed tumor sample.
    type: File
    inputBinding:
      position: 1
  snps_pileup_normal:
    doc: The file containing the pileup of the SNPs of the normal sample.
    type: File
    inputBinding:
      position: 2
  snps_pileup_tumor:
    doc: The file containing the pileup of the SNPs of the tumor sample.
    type: File
    inputBinding:
      position: 3
  output_directory_name:
    doc: The name of the folder where the CLONET output will be stored.
    type: string
    default: "clonet"
    inputBinding:
      position: 4
  snv_table:
    doc: |-
      The file containing the SNVs of the sample. This file is an optional
      input. When it is passed, CLONET will output the clonality and corrected
      allelic fractions for the SNVs.
    type: File?
    inputBinding:
      prefix: "--snv_table"
  threads:
    doc: The number of parallel threads that will be used for computation.
    type: int
    default: 1
    inputBinding:
      prefix: "--num_threads"
  plot_filename:
    doc: |-
      The name of the file that will contain the CLONET report plot. If the
      option is passed, the report will be generated otherwise no report will be
      generated.
    type: string?
    inputBinding:
      prefix: "--plot_filename"
  beta_table_filename:
    doc: |-
      The name of the file that will contain the beta table.
    type: string
    default: "beta_table.tsv"
    inputBinding:
      prefix: "--beta_table_filename"
  ploidy_table_filename:
    doc: |-
      The name of the file that will contain the ploidy table.
    type: string
    default: "ploidy_table.tsv"
    inputBinding:
      prefix: "--ploidy_table_filename"
  admixture_table_filename:
    doc: |-
      The name of the file that will contain the admixture table.
    type: string
    default: "admixture_table.tsv"
    inputBinding:
      prefix: "--admixture_table_filename"
  scna_clonality_table_filename:
    doc: |-
      The name of the file that will contain the somatic copy number
      clonality table.
    type: string
    default: "scna_clonality_table.tsv"
    inputBinding:
      prefix: "--scna_clonality_table_filename"
  allele_specific_cna_table_filename:
    doc: |-
      The name of the file that will contain the somatic copy number
      aberrations table.
    type: string
    default: "allele_specific_scna_table.tsv"
    inputBinding:
      prefix: "--allele_specific_cna_table_filename"
  snv_clonality_table_filename:
    doc: |-
      The name of the file that will contain the SNVs clonality table. This
      output will be generated only if the --snv_table option is provided.
    type: string
    default: "snv_clonality_table.tsv"
    inputBinding:
      prefix: "--snv_clonality_table_filename"
  log_to_file:
    doc: |-
      If true, the output generated by the tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true
  redirect_stdout_to_stderr:
    doc: |-
      If true, includes the stderr output along with the stdout in the log file.
    type: boolean
    default: true
  log_filename:
    doc: The name of the output file that will contain the output.
    type: string
    default: "clonet.log"

outputs:
  output:
    doc: The output directory generated by CLONET.
    type: Directory?
    outputBinding:
      glob: "$(inputs.output_directory_name)"
  output_map:
    doc: |-
      A data structure that will allow easy access to the various outputs
      generated by CLONET.
    type: out_map:clonet_output_map?
    outputBinding:
      glob: "$(inputs.output_directory_name)"
      outputEval: |
        ${
          var filt_fun = function (filt) { return function (ff) { return ff.basename === filt }; },
              files    = self[0].listing,
              result   = {
                beta_table:                files.filter(filt_fun(inputs.beta_table_filename))[0],
                ploidy_table:              files.filter(filt_fun(inputs.ploidy_table_filename))[0],
                admixture_table:           files.filter(filt_fun(inputs.admixture_table_filename))[0],
                scna_clonality_table:      files.filter(filt_fun(inputs.scna_clonality_table_filename))[0],
                allele_specific_cna_table: files.filter(filt_fun(inputs.allele_specific_cna_table_filename))[0]
              };
          if (inputs.plot_filename != null) {
            result.report_pdf = files.filter(filt_fun(inputs.plot_filename))[0];
          }
          if (inputs.snv_table != null) {
            result.snv_clonality_table = files.filter(filt_fun(inputs.snv_clonality_table_filename))[0];
          }
          return result;
        }
  log_file:
    doc: |-
      The log file, if enabled, that captures the output produced by the tool.
    type: File?
    outputBinding:
      glob: $(inputs.log_filename)

arguments:
  - valueFrom: "$(inputs.log_to_file ? '2> ' + inputs.log_filename + (inputs.redirect_stdout_to_stderr ? ' 1>&2' : '') : '')"
    shellQuote: false
    position: 99999

$namespaces:
  out_map: "../types/clonet_output_map.yaml#"
