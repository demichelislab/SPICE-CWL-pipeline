cwlVersion: v1.1
class: CommandLineTool
baseCommand: [pipeline_utils, pileup_to_genotype]

label: Converts the pileup to a genotype file

doc: |-
  Script that allows to generate a VCF file containing information about the
  genotypes of the genomic positions passed in input.

requirements:
  ShellCommandRequirement: {}
  InlineJavascriptRequirement: {}

hints:
  DockerRequirement:
    dockerPull: demichelislab/pipeline_utils:latest

inputs:
  snps_pileup:
    doc: |-
      The file containing the pileup from which the coverage file will be
      generated.
    type: File
    inputBinding:
      position: 1
  snps_list_file:
    doc: |-
      If passed, only positions that are listed in this file will be included in
      the output file. Moreover positions that are included in the file but
      either don't have a defined genoytpe or have coverage lower than the
      min_depth_of_coverage threshold will be included in the output with an
      unknown genotype.
    type: File?
    inputBinding:
      prefix: "--snps_list_file"
  sample_name:
    doc: The name of the sample that is passed in input.
    type: string?
    inputBinding:
      prefix: "--sample_name"
  min_depth_of_coverage:
    doc: |-
      Position with coverage below this threshold will be excluded from the
      output file.
    type: int?
    default: 10
    inputBinding:
      prefix: "--min_depth_of_coverage"
  heterozygous_perc:
    doc: |-
      The value to be used as threshold to determine the genotype of each
      position. If a position have an alleic fraction that is between
      heterozygous_perc (included) and [1 - heterozygous_perc] (excluded), the
      position is considered heterozygous. Otherwise is considered homozygous
      either for reference or alternative allele depending on the allelic
      fraction.
    type: float?
    default: 0.2
    inputBinding:
      prefix: "--heterozygous_perc"
  output_filename:
    doc: The name of the file where the genotype file will be written.
    type: string?
    default: "genotype.vcf"
    inputBinding:
      prefix: "--output_filename"
  log_to_file:
    doc: |-
      If true, the output generated by the tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true
  redirect_stdout_to_stderr:
    doc: |-
      If true, it includes the stderr output along with the stdout in the log
      file.
    type: boolean
    default: true
  log_filename:
    doc: The name of the output file that will contain the output.
    type: string
    default: "pileup_to_genotype.log"

outputs:
  output:
    doc: The output genotype file.
    type: File?
    outputBinding:
      glob: $(inputs.output_filename)
  log_file:
    doc: |-
      The log file, if enabled, that captures the output produced by the tool.
    type: File?
    outputBinding:
      glob: $(inputs.log_filename)

arguments:
  - valueFrom: $(runtime.outdir)
    position: 2
  - valueFrom: "$(inputs.log_to_file ? '2> ' + inputs.log_filename + (inputs.redirect_stdout_to_stderr ? ' 1>&2' : '') : '')"
    shellQuote: false
    position: 99999

