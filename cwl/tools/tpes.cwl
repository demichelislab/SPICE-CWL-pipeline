cwlVersion: v1.1
class: CommandLineTool
baseCommand: [tpes]

label: Computes the tumor purity of a sample using TPES.

doc: |-
  A bioinformatics tool for the estimation of the tumor purity from sequencing
  data. It uses the set of putative clonal somatic single nucleotide variants
  within copy number neutral segments to call tumor cellularity.

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/tpes_output_map.yaml"
  ShellCommandRequirement: {}
  InlineJavascriptRequirement: {}
  LoadListingRequirement:
    loadListing: shallow_listing

hints:
  DockerRequirement:
    dockerPull: demichelislab/tpes:latest

inputs:
  sample_name:
    doc: The name of the sample that is passed in input.
    type: string
    inputBinding:
      position: 1
  segfile:
    doc: |-
      The file containing the copy numbers segments of the analyzed
      tumor sample.
    type: File
    inputBinding:
      position: 2
  snv_coverage_file:
    doc: The file containing the coverage of SNVs positions.
    type: File
    inputBinding:
      position: 3
  ploidy:
    doc: The average ploidy of the tumor sample.
    type: string
    default: "NA"
    inputBinding:
      position: 4
  output_directory_name:
    doc: The name of the file where the TPES output table will be written.
    type: string?
    default: "tpes"
    inputBinding:
      position: 5
  plot_filename:
    doc: |-
      The name of the file that will contain the TPES plot. Only when this
      parameter is provided the report will be generated.
    type: string?
    inputBinding:
      prefix: --report_filename
  output_filename:
    doc: The name of the file where the TPES output table will be written.
    type: string
    default: "tpes.tsv"
    inputBinding:
      prefix: --output_filename
  log_to_file:
    doc: |-
      If true, the output generated by the tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true
  redirect_stdout_to_stderr:
    doc: |-
      If true, it includes the stderr output along with the stdout in the log
      file.
    type: boolean
    default: true
  log_filename:
    doc: The name of the output file that will contain the output.
    type: string
    default: "tpes.log"

outputs:
  output:
    doc: The output directory generated by TPES.
    type: Directory?
    outputBinding:
      glob: "$(inputs.output_directory_name)"
  output_map:
    doc: |-
      A data structure that will allow easy access to the various outputs
      produced by TPES.
    type: out_map:tpes_output_map
    outputBinding:
      glob: "$(inputs.output_directory_name)"
      outputEval: |
        ${
          var filt_fun = function (filt) { return function (ff) { return ff.basename === filt }; },
              files    = self[0].listing,
              result   = {
                table: files.filter(filt_fun(inputs.output_filename))[0]
              };
          if (inputs.report_filename != null) {
            result.report_pdf = files.filter(filt_fun(inputs.report_filename))[0];
          }
          return result;
        }
  log_file:
    doc: |-
      The log file, if enabled, that captures the output produced by the tool.
    type: File?
    outputBinding:
      glob: $(inputs.log_filename)

arguments:
  - valueFrom: "$(inputs.log_to_file ? '2> ' + inputs.log_filename + (inputs.redirect_stdout_to_stderr ? ' 1>&2' : '') : '')"
    shellQuote: false
    position: 99999

$namespaces:
  out_map: "../types/tpes_output_map.yaml#"
