cwlVersion: v1.1
class: CommandLineTool
baseCommand: vep

label: Annotates the variants with affected gene and other annotations.

doc: |-
  VEP determines the effect of variants (SNPs, insertions, deletions, CNVs or
  structural variants) on genes, transcripts, and protein sequence, as well as
  regulatory regions.

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/vep_output_map.yaml"
  ShellCommandRequirement: {}
  InlineJavascriptRequirement: {}
  LoadListingRequirement:
    loadListing: shallow_listing
  InitialWorkDirRequirement:
    listing: |
      ${
        return [
          {
            class: "Directory",
            basename: inputs.output_directory_name,
            listing: [],
            writable: true
          }
        ]
      }

hints:
  DockerRequirement:
    dockerPull: demichelislab/vep:latest

inputs:
  input_file:
    doc: The input file that contains the variants to annotate.
    type: File
    inputBinding:
      prefix: "--input_file"
  file_format:
    doc: The format of the input file.
    default: "vcf"
    type:
      type: enum
      symbols:
        - ensembl
        - vcf
        - hgvs
        - id
        - region
        - spdi
    inputBinding:
      prefix: "--format"
  output_filename:
    doc: |-
      The name of the file where the annotation of the variants will be saved.
    type: string
    default: vep.txt
    inputBinding:
      prefix: "--output_file"
      valueFrom: $(inputs.output_directory_name)/$(self)
  reference_genome_version:
    doc: The version of the reference genome to use for annotation.
    type: string
    inputBinding:
      prefix: "--assembly"
  reference_genome_fasta_file:
    doc: The file containing the reference genome in FASTA format.
    type: File
    inputBinding:
      prefix: "--fasta"
  vep_data_directory:
    doc: The folder where VEP can find the annotation database.
    type: Directory
    inputBinding:
      prefix: "--dir"
  enable_all_annotations:
    doc: |-
      If true, VEP will output all the available annotations for each variant.
    type: boolean
    default: true
    inputBinding:
      prefix: "--everything"
  tabular_format:
    doc: If true, VEP output will be in tabular format.
    type: boolean
    default: true
    inputBinding:
      prefix: "--tab"
  run_offline:
    doc: |-
      If true, VEP will run in offline mode (i.e. will not connect to remote
      databases).
    type: boolean
    default: true
    inputBinding:
      prefix: "--offline"
  annotate_all_variants:
    doc: If true, VEP will not skip the variant even if it fails validation.
    type: boolean
    default: true
    inputBinding:
      prefix: "--dont_skip"
  pick_single_gene_per_variant:
    doc: If true, VEP will choose a single gene affected by each variant.
    type: boolean
    default: true
    inputBinding:
      prefix: "--pick"
  output_directory_name:
    doc: The name of the folder where the VEP output will be stored.
    type: string
    default: "vep"
  threads:
    doc: The number of parallel threads that will be used for computation.
    type: int
    default: 1
    inputBinding:
      prefix: "--fork"
  log_to_file:
    doc: |-
      If true, the output generated by the tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true
  redirect_stdout_to_stderr:
    doc: |-
      If true, it includes the stderr output along with the stdout in the log
      file.
    type: boolean
    default: true
  log_filename:
    doc: The name of the output file that will contain the output.
    type: string
    default: "vep.log"

arguments:
  - valueFrom: "--cache"
  - valueFrom: "--stats_text"
  - valueFrom: "$(inputs.log_to_file ? '2> ' + inputs.log_filename + (inputs.redirect_stdout_to_stderr ? ' 1>&2' : '') : '')"
    shellQuote: false
    position: 99999

outputs:
  output:
    doc: The output directory generated by VEP.
    type: Directory?
    outputBinding:
      glob: $(inputs.output_directory_name)
  output_map:
    doc: |-
      A data structure that will allow easy access to the various outputs
      produced by VEP.
    type: out_map:vep_output_map?
    outputBinding:
      glob: $(inputs.output_directory_name)
      outputEval: |
        ${
          var filt_fun = function (filt) { return function (ff) { return ff.basename.endsWith(filt) }; },
              files    = self[0].listing;
          return {
            table:            files.filter(filt_fun(inputs.output_filename))[0],
            annotation_stats: files.filter(filt_fun("_summary.txt"))[0]
          };
        }
  log_file:
    doc: |-
      The log file, if enabled, that captures the output produced by the tool.
    type: File?
    outputBinding:
      glob: $(inputs.log_filename)

$namespaces:
  out_map: "../types/vep_output_map.yaml#"
