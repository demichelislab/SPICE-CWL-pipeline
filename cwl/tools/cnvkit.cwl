cwlVersion: v1.1
class: CommandLineTool
baseCommand: [cnvkit, batch]

label: |-
  Runs CNVkit to obtain copy number segments from a pair of matched normal and
  tumor data.

doc: |-
  CNVkit is a Python library and command-line software toolkit to infer and
  visualize copy number from high-throughput DNA sequencing data. It is designed
  for use with hybrid capture, including both whole-exome and custom target
  panels, and short-read sequencing platforms such as Illumina and Ion Torrent.

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/cnvkit_output_map.yaml"
      - $import: "../types/sex_enum.yaml"
  ShellCommandRequirement: {}
  InlineJavascriptRequirement: {}
  LoadListingRequirement:
    loadListing: shallow_listing

hints:
  DockerRequirement:
    dockerPull: demichelislab/cnvkit:latest

inputs:
  bam_file_tumor:
    doc: The BAM file for the tumor sample.
    type: File
    secondaryFiles: [^.bai, .bai]
    inputBinding:
      position: 0
  bam_file_normal:
    doc: The BAM file for the normal sample.
    type: File
    secondaryFiles: [^.bai, .bai]
    inputBinding:
      prefix: "--normal"
      position: 1
  sample_sex:
    doc: |-
      The sex of the patient from which the sample was collected. Either "m"
      or "f".
    type: sex_enum:sex_enum
  target_bed_file:
    doc: The BED file containing the regions captured by the WES capture kit.
    type: File
    inputBinding:
      prefix: "--targets"
  reference_genome_fasta_file:
    doc: The file containing the reference genome in FASTA format.
    secondaryFiles: [^.fai, .fai]
    type: File
    inputBinding:
      prefix: "--fasta"
  accessible_regions_bed:
    doc: |-
      An optional file containing the regions of the genome that are accessible
      (meaning that can be sequenced).
    type: File?
    inputBinding:
      prefix: "--access"
  output_directory_name:
    doc: The name of the folder where the output files will be generated.
    type: string?
    default: "cnvkit"
    inputBinding:
      prefix: "--output-dir"
  log_to_file:
    doc: |-
      If true, the output generated by the tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true
  redirect_stdout_to_stderr:
    doc: |-
      If true, it includes the stderr output along with the stdout in the log file.
    type: boolean
    default: true
  log_filename:
    doc: The name of the output file that will contain the output.
    type: string
    default: "cnvkit.log"

arguments:
  - valueFrom: "$(inputs.sample_sex == 'm' ? '--male-reference' : '')"
  - valueFrom: "$(inputs.log_to_file ? '2> ' + inputs.log_filename + (inputs.redirect_stdout_to_stderr ? ' 1>&2' : '') : '')"
    shellQuote: false
    position: 99999

outputs:
  output:
    doc: The output directory generated by CNVkit.
    type: Directory?
    outputBinding:
      glob: $(inputs.output_directory_name)
  output_map:
    doc: |-
      A data structure that will allow easy access to the various outputs
      produced by CNVKit.
    type: out_map:cnvkit_output_map?
    outputBinding:
      glob: $(inputs.output_directory_name)
      outputEval: |
        ${
          var filt_fun = function (filt) { return function (ff) { return ff.basename.endsWith(filt) }; },
              files    = self[0].listing;
          return {
            output_segments: files.filter(filt_fun(inputs.bam_file_tumor.nameroot + ".cns"))[0],
            output_integer_segments: files.filter(filt_fun(".call.cns"))[0],
            output_bintest_segments: files.filter(filt_fun(".bintest.cns"))[0],
            output_log_ratios: files.filter(filt_fun(".cnr"))[0],
            target_regions: files.filter(filt_fun(".target.bed"))[0],
            antitarget_regions: files.filter(filt_fun(".antitarget.bed"))[0],
            reference_coverage: files.filter(filt_fun("reference.cnn"))[0],
            target_coverage_normal: files.filter(filt_fun(inputs.bam_file_normal.nameroot + ".targetcoverage.cnn"))[0],
            antitarget_coverage_normal: files.filter(filt_fun(inputs.bam_file_normal.nameroot + ".antitargetcoverage.cnn"))[0],
            target_coverage_tumor: files.filter(filt_fun(inputs.bam_file_tumor.nameroot + ".targetcoverage.cnn"))[0],
            antitarget_coverage_tumor: files.filter(filt_fun(inputs.bam_file_tumor.nameroot + ".antitargetcoverage.cnn"))[0]
          };
        }
  log_file:
    doc: The log file, if enabled, that captures the output produced by the tool.
    type: File?
    outputBinding:
      glob: $(inputs.log_filename)

$namespaces:
  sex_enum: "../types/sex_enum.yaml#"
  out_map: "../types/cnvkit_output_map.yaml#"
