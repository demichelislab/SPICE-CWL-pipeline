cwlVersion: v1.1
class: CommandLineTool
baseCommand: [gatk4, FilterMutectCalls]

label: Filter mutect2 calls to obtain structural variants that pass the filters.

doc: Filter variants in a Mutect2 VCF callset.

requirements:
  ShellCommandRequirement: {}
  InlineJavascriptRequirement: {}

hints:
  DockerRequirement:
    dockerPull: demichelislab/gatk4:latest

inputs:
  unfiltered_vcf_file:
    doc: The file containing the unfiltered variants.
    type: File
    secondaryFiles: [^.stats, .stats, ^.idx, .idx]
    inputBinding:
      prefix: "--variant"
  reference_genome_fasta_file:
    doc: The file containing the reference genome in FASTA format.
    type: File
    secondaryFiles: [^.fai, .fai, ^.dict, .dict]
    inputBinding:
      prefix: "--reference"
  kit_target_interval_file:
    doc: |-
      The interval list file containing the regions captured by the capture kit.
    type: File
    inputBinding:
      prefix: "--intervals"
  filtered_variants_output_filename:
    doc: The name of the file where mutect2 will put the filtered variants.
    type: string?
    default: "mutect2_filtered.vcf"
    inputBinding:
      prefix: "--output"
  log_to_file:
    doc: |-
      If true, the output generated by the tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true
  redirect_stdout_to_stderr:
    doc: |-
      If true, it includes the stderr output along with the stdout in the log
      file.
    type: boolean
    default: true
  log_filename:
    doc: The name of the output file that will contain the output.
    type: string
    default: "mutect2_filter.log"

arguments:
  - valueFrom: "$(inputs.log_to_file ? '2> ' + inputs.log_filename + (inputs.redirect_stdout_to_stderr ? ' 1>&2' : '') : '')"
    shellQuote: false
    position: 99999

outputs:
  output:
    doc: The variants that pass the mutect2 filters.
    type: File?
    outputBinding:
      glob: $(inputs.filtered_variants_output_filename)
    secondaryFiles: [^.idx, .idx]
  log_file:
    doc: The log file, if enabled, that capture the output produced by the tool.
    type: File?
    outputBinding:
      glob: $(inputs.log_filename)
