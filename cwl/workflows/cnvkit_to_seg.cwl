cwlVersion: v1.1
class: Workflow

doc: |-
  Runs segmentation using CVNKit and exports the copy number segments in a
  segfile.

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/cnvkit_output_map.yaml"
      - $import: "../types/sex_enum.yaml"
  SubworkflowFeatureRequirement: {}
  InlineJavascriptRequirement: {}
  StepInputExpressionRequirement: {}
  MultipleInputFeatureRequirement: {}

inputs:
  bam_file_normal:
    doc: The BAM file of the normal sample.
    type: File
  bam_file_tumor:
    doc: The BAM file of the tumor sample.
    type: File
  sample_sex:
    doc: |-
      The sex of the patient from which the sample was collected. Either "m"
      or "f".
    type: sex_enum:sex_enum
  target_bed_file:
    doc: The BED file containing the regions targeted by the capture kit.
    type: File
  reference_genome_fasta_file:
    doc: The file containing the reference genome in FASTA format.
    type: File
  accessible_regions_bed:
    doc: |-
      An optional file containing the regions of the genome that are accessible
      (meaning that can be sequenced).
    type: File?
  output_directory_name:
    doc: The name of the folder where the output files will be generated.
    type: string?
  log_to_file:
    doc: |-
      If true the output generated by each tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true


outputs:
  output:
    doc: The output directory produced by CNVkit including the exported segfile.
    type: Directory?
    outputSource: merge_output/output
  output_map:
    doc: |-
      A data structure that will allow to easily access to the various outputs
      produced by CNVKit.
    type: out_map:cnvkit_output_map?
    outputSource: merge_output/output_map
  log_files:
    doc: |-
      The log file, if enabled, that captures the output produced by each tool.
    type: File[]?
    outputSource:
      - cnvkit/log_file
      - export_segfile/log_file

steps:
  cnvkit:
    doc: Runs CNVkit on a paired normal and tumor samples.
    run: ../tools/cnvkit.cwl
    in:
      bam_file_normal: bam_file_normal
      bam_file_tumor: bam_file_tumor
      sample_sex: sample_sex
      target_bed_file: target_bed_file
      reference_genome_fasta_file: reference_genome_fasta_file
      accessible_regions_bed: accessible_regions_bed
      output_directory_name: output_directory_name
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_file

  export_segfile:
    doc: Exports the segments called by CNVkit in segfile format.
    run: ../tools/cnvkit_export_segfile.cwl
    in:
      cns_file:
        source: cnvkit/output_map
        valueFrom: $(self.output_segments)
      log_to_file: log_to_file
    out:
      - output
      - log_file
  merge_output:
    doc: Merges outputs of each step in a single output port and output_map.
    in:
      cnvkit_output: cnvkit/output
      cnvkit_output_map: cnvkit/output_map
      segfile: export_segfile/output
    out:
      - output
      - output_map
    run:
      class: ExpressionTool
      requirements:
        LoadListingRequirement:
          loadListing: shallow_listing
      inputs:
        cnvkit_output: Directory?
        cnvkit_output_map: out_map:cnvkit_output_map
        segfile: File?
      outputs:
        output: Directory?
        output_map: out_map:cnvkit_output_map?
      expression: |
        ${
          var output_directory = inputs.cnvkit_output,
              output_map       = inputs.cnvkit_output_map;
          delete output_directory['location'];
          output_directory.listing.push(inputs.segfile);
          output_map.segfile = inputs.segfile;
          return {
            output:     output_directory,
            output_map: output_map
          };
        }

$namespaces:
  sex_enum: "../types/sex_enum.yaml#"
  out_map: "../types/cnvkit_output_map.yaml#"
