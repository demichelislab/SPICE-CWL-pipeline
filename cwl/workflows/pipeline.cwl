cwlVersion: v1.1
class: Workflow

doc: |-
  The pipeline implemented in this workflow allows for the analysis of paired
  normal tumor NGS WES BAM files. It runs a comprehensive characterization of
  the data. In order to ensure the validity of the analysis some QC metrics are
  included in the pipeline as the normal/tumor genotype distance (to ensure that
  samples are properly paired) and quality metrics (Picard HsMetrics). Ethnicity
  is automatically inferred by using EthSEQ. The pipeline then calls SNVs,
  indels and copy number profiles and next infers purity and ploidy of the tumor
  sample by using CLONETv2. Upon ploidy and admixture correction, CLONETv2
  generates corrected copy number and allele specific copy numbers (the number
  of copies of each parental allele) calls together with segment clonality (the
  fraction of the tumor that have a certain aberration). A second purity
  inference method based on SNVs (TPES) is also run on the data.  As a final
  result the pipeline produces two folders: one with the analysis results (data)
  and the second that includes the logs of each tool (logs).

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/clonet_output_map.yaml"
      - $import: "../types/cnvkit_output_map.yaml"
      - $import: "../types/ethseq_output_map.yaml"
      - $import: "../types/hsmetrics_output_map.yaml"
      - $import: "../types/mutect2_output_map.yaml"
      - $import: "../types/snvs_coverage_output_map.yaml"
      - $import: "../types/spia_output_map.yaml"
      - $import: "../types/tpes_output_map.yaml"
      - $import: "../types/vep_output_map.yaml"
      - $import: "../types/pipeline_output_map.yaml"
      - $import: "../types/sex_enum.yaml"
  SubworkflowFeatureRequirement: {}
  InlineJavascriptRequirement: {}
  StepInputExpressionRequirement: {}
  MultipleInputFeatureRequirement: {}

inputs:
  bam_file_normal:
    doc: The BAM file of the normal sample.
    type: File
    secondaryFiles: [^.bai, .bai]
  bam_file_tumor:
    doc: The BAM file of the tumor sample.
    type: File
    secondaryFiles: [^.bai, .bai]
  reference_genome_fasta_file:
    doc: The file containing the reference genome in FASTA format.
    type: File
    secondaryFiles: [^.fai, .fai, ^.dict, .dict]
  kit_target_bed_file:
    doc: The BED file containing the regions targeted by the capture kit.
    type: File
  kit_bait_bed_file:
    doc: The BED file containing the regions captured by the capture kit.
    type: File
  kit_target_interval_file:
    doc: |-
      The interval list file containing the regions that are targeted by the
      kit.
    type: File
  kit_bait_interval_file:
    doc: |-
      The interval list file containing the regions that are captured by the
      kit.
    type: File
  snps_in_kit_vcf_file:
    doc: |-
      The list of SNPs that are contained in the regions targeted by the
      sequencing kit.
    type: File
  ethseq_snps_vcf_file:
    doc: The file with the SNPs that are included in the EthSEQ model.
    type: File
  ethseq_snps_gds_file:
    doc: |-
      The GDS file containing the model of the SNPs used for ethnicity
      inference.
    type: File
  spia_snps_vcf_file:
    doc: |-
      The file with the SNPs that are used by SPIA to compute the genotype
      distance.
    type: File
  sample_sex:
    doc: |-
      The sex of the patient from which the sample was collected. Either "m"
      or "f".
    type: sex_enum:sex_enum
  accessible_regions_bed:
    doc: |-
      An optional file containing the regions of the genome that are accessible
      (meaning that can be sequenced).
    type: File?
  vep_reference_genome_version:
    doc: The VEP version of the reference genome to use for annotation.
    type: string
  vep_data_directory:
    doc: The folder where VEP can find the annotation database.
    type: Directory
  threads:
    doc: The number of parallel threads that will be used for computation.
    type: int?
    default: 1
  create_reports:
    doc: |-
      If true enables the creation of graphical reports. Only the tools that
      support this type of output will include such outputs files.
    type: boolean
    default: false
  log_to_file:
    doc: |-
      If true, the output generated by each tool will be redirected to a
      file. Otherwise the output will be printed on the output.
    type: boolean
    default: true

outputs:
  output:
    doc: The output directory produced by the pipeline.
    type: Directory?
    outputSource: merge_output/output
  output_map:
    doc: |-
      A data structure that will allow to easily access the outputs produced by
      the pipeline.
    type: out_map:pipeline_output_map?
    outputSource: merge_output/output_map
  log_files:
    doc: |-
      The log file, if enabled, that captures the output produced by each tool.
    type: Directory?
    outputSource: merge_log_files/output

steps:
  pileup_normal:
    doc: Computes the pileup of the SNPs in the normal sample.
    run: ../tools/pacbam_pileup.cwl
    in:
      bam_file: bam_file_normal
      regions_bed_file: kit_target_bed_file
      reference_genome_fasta_file: reference_genome_fasta_file
      snps_vcf_file: snps_in_kit_vcf_file
      threads: threads
      log_filename:
        default: "pileup_normal.log"
      log_to_file: log_to_file
    out:
      - output
      - log_file
  pileup_tumor:
    doc: Computes the pileup of the SNPs in the tumor sample.
    run: ../tools/pacbam_pileup.cwl
    in:
      bam_file: bam_file_tumor
      regions_bed_file: kit_target_bed_file
      reference_genome_fasta_file: reference_genome_fasta_file
      snps_vcf_file: snps_in_kit_vcf_file
      threads: threads
      log_filename:
        default: "pileup_tumor.log"
      log_to_file: log_to_file
    out:
      - output
      - log_file
  ethseq:
    doc: Runs EthSEQ to infer ethnicity in the normal sample.
    run: ethseq_from_pileup.cwl
    in:
      snps_pileup: pileup_normal/output
      snps_list_file: ethseq_snps_vcf_file
      model_gds_file: ethseq_snps_gds_file
      threads: threads
      enable_plot: create_reports
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_files
  spia:
    doc: |-
      Runs SPIA to check that normal and tumor samples are from the same
      individual.
    run: spia_from_pileup.cwl
    in:
      snps_pileup_normal: pileup_normal/output
      snps_pileup_tumor: pileup_tumor/output
      snps_list_file: spia_snps_vcf_file
      plot_filename:
        source: create_reports
        valueFrom: "$( self ? 'spia.pdf' : null)"
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_files
  hsmetrics_normal:
    doc: Runs Picard HsMetrics to collect quality measures on the normal sample.
    run: ../tools/picard_hsmetrics.cwl
    in:
      bam_file: bam_file_normal
      reference_genome_fasta_file: reference_genome_fasta_file
      kit_bait_interval_file: kit_bait_interval_file
      kit_target_interval_file: kit_target_interval_file
      output_directory_name:
        default: "hsmetrics_normal"
      output_filename:
        default: "hsmetrics_normal.txt"
      per_target_coverage_output_name:
        default: "hsmetrics_per_target_coverage_normal.txt"
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_file
  hsmetrics_tumor:
    doc: Runs Picard HsMetrics to collect quality measures on the tumor sample.
    run: ../tools/picard_hsmetrics.cwl
    in:
      bam_file: bam_file_tumor
      reference_genome_fasta_file: reference_genome_fasta_file
      kit_bait_interval_file: kit_bait_interval_file
      kit_target_interval_file: kit_target_interval_file
      output_directory_name:
        default: "hsmetrics_tumor"
      output_filename:
        default: "hsmetrics_tumor.txt"
      per_target_coverage_output_name:
        default: "hsmetrics_per_target_coverage_tumor.txt"
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_file
  mutect2:
    doc: Call somatic variants present in the tumor sample.
    run: mutect2_and_filter.cwl
    in:
      bam_file_normal: bam_file_normal
      bam_file_tumor: bam_file_tumor
      reference_genome_fasta_file: reference_genome_fasta_file
      kit_target_interval_file: kit_target_bed_file
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_files
  snvs_coverage:
    doc: Compute the coverage of the SNVs in the normal and tumor samples.
    run: snvs_coverage.cwl
    in:
      bam_file_normal: bam_file_normal
      bam_file_tumor: bam_file_tumor
      variants_vcf:
        source: mutect2/output_map
        valueFrom: $(self.vcf_pass)
      reference_genome_fasta_file: reference_genome_fasta_file
      threads: threads
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_files
  vep:
    doc: Annotates the somatic variants found in the tumor sample.
    run: ../tools/vep.cwl
    in:
      input_file:
        source: mutect2/output_map
        valueFrom: $(self.vcf_pass)
      reference_genome_version: vep_reference_genome_version
      reference_genome_fasta_file: reference_genome_fasta_file
      vep_data_directory: vep_data_directory
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_file
  merge_vep_snvs_coverage:
    doc: Adds coverage information for the SNVs to the variant annotation.
    run: ../tools/merge_vep_snvs_coverage.cwl
    in:
      vep_annotated_variants:
        source: vep/output_map
        valueFrom: $(self.table)
      snvs_pileup_normal:
        source: snvs_coverage/output_map
        valueFrom: $(self.snvs_coverage_normal)
      snvs_pileup_tumor:
        source: snvs_coverage/output_map
        valueFrom: $(self.snvs_coverage_tumor)
      log_to_file: log_to_file
    out:
      - output
      - log_file
  cnvkit:
    doc: Runs copy number segmentation.
    run: cnvkit_to_seg.cwl
    in:
      bam_file_normal: bam_file_normal
      bam_file_tumor: bam_file_tumor
      sample_sex: sample_sex
      target_bed_file: kit_target_bed_file
      reference_genome_fasta_file: reference_genome_fasta_file
      accessible_regions_bed: accessible_regions_bed
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_files
  clonet:
    doc: |-
      Runs CLONET to estimate ploidy and purity and to obtain allele specific
      copy numbers and clonality.
    run: ../tools/clonet.cwl
    in:
      segfile:
        source: cnvkit/output_map
        valueFrom: $(self.segfile)
      snps_pileup_normal: pileup_normal/output
      snps_pileup_tumor: pileup_tumor/output
      snv_table: merge_vep_snvs_coverage/output
      threads: threads
      plot_filename:
        source: create_reports
        valueFrom: "$(self ? 'clonet.pdf' : null)"
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_file
  tpes:
    doc: |-
      Runs TPES to estimate purity from SNVs.
    run: ../workflows/tpes_from_clonet_pacbam.cwl
    in:
      snvs_pileup:
        source: snvs_coverage/output_map
        valueFrom: $(self.snvs_coverage_tumor)
      ploidy_table:
        source: clonet/output_map
        valueFrom: $(self.ploidy_table)
      segfile:
        source: cnvkit/output_map
        valueFrom: $(self.segfile)
      sample_name:
        source: bam_file_tumor
        valueFrom: $(self.nameroot)
      plot_filename:
        source: create_reports
        valueFrom: "$(self ? 'tpes.pdf' : null)"
      log_to_file: log_to_file
    out:
      - output
      - output_map
      - log_files
  merge_output:
    doc: Merges outputs of each step in a single output port and output_map.
    in:
      pileup_normal_output: pileup_normal/output
      pileup_tumor_output: pileup_tumor/output
      ethseq_output: ethseq/output
      ethseq_output_map: ethseq/output_map
      spia_output: spia/output
      spia_output_map: spia/output_map
      hsmetrics_normal_output: hsmetrics_normal/output
      hsmetrics_normal_output_map: hsmetrics_normal/output_map
      hsmetrics_tumor_output: hsmetrics_tumor/output
      hsmetrics_tumor_output_map: hsmetrics_tumor/output_map
      mutect2_output: mutect2/output
      mutect2_output_map: mutect2/output_map
      snvs_coverage_output: snvs_coverage/output
      snvs_coverage_output_map: snvs_coverage/output_map
      vep_output: vep/output
      vep_output_map: vep/output_map
      merge_vep_snvs_output: merge_vep_snvs_coverage/output
      cnvkit_output: cnvkit/output
      cnvkit_output_map: cnvkit/output_map
      clonet_output: clonet/output
      clonet_output_map: clonet/output_map
      tpes_output: tpes/output
      tpes_output_map: tpes/output_map
    out:
      - output
      - output_map
    run:
      class: ExpressionTool
      requirements:
        LoadListingRequirement:
          loadListing: shallow_listing
      inputs:
        pileup_normal_output: File?
        pileup_tumor_output: File?
        ethseq_output: Directory?
        ethseq_output_map: ethseq_map:ethseq_output_map?
        spia_output: Directory?
        spia_output_map: spia_map:spia_output_map?
        hsmetrics_normal_output: Directory?
        hsmetrics_normal_output_map: hsmetrics_map:hsmetrics_output_map?
        hsmetrics_tumor_output: Directory?
        hsmetrics_tumor_output_map: hsmetrics_map:hsmetrics_output_map?
        mutect2_output: Directory?
        mutect2_output_map: mutect2_map:mutect2_output_map?
        snvs_coverage_output: Directory?
        snvs_coverage_output_map: snvs_coverage_map:snvs_coverage_output_map?
        vep_output: Directory?
        vep_output_map: vep_map:vep_output_map?
        merge_vep_snvs_output: File?
        cnvkit_output: Directory?
        cnvkit_output_map: cnvkit_map:cnvkit_output_map?
        clonet_output: Directory?
        clonet_output_map: clonet_map:clonet_output_map?
        tpes_output: Directory?
        tpes_output_map: tpes_map:tpes_output_map?
      outputs:
        output: Directory?
        output_map: out_map:pipeline_output_map?
      expression: |
        ${
          var outputs_to_exclude = ["pileup_normal_output", "pileup_tumor_output", "merge_vep_snvs_output", "vep_output"],
              inputs_names       = Object.keys(inputs),
              outs               = inputs_names
                                     .filter(function (nn) {
                                       return outputs_to_exclude.indexOf(nn) == -1 &&
                                                nn.endsWith("_output") &&
                                                inputs[nn] !== null;
                                     })
                                     .map(function (nn) { return inputs[nn]; }),
              maps               = inputs_names
                                     .filter(function (nn) { return nn.endsWith("_map") && inputs[nn] !== null; })
                                     .reduce(function (accum, nn) { accum[nn] = inputs[nn]; return accum; }, {}),
              data_folder       = {
                class:    "Directory",
                basename: "data",
                listing:  []
              },
              pileup_folder       = {
                class:    "Directory",
                basename: "snps_pileups",
                listing:  []
              },
              vep_output_folder  = inputs.vep_output,
              output_map         = {};
          if (inputs.pileup_normal_output !== null) {
              maps.pileup_normal_output = inputs.pileup_normal_output;
              pileup_folder.listing.push(inputs.pileup_normal_output);
          }
          if (inputs.pileup_tumor_output !== null) {
              maps.pileup_tumor_output = inputs.pileup_tumor_output;
              pileup_folder.listing.push(inputs.pileup_tumor_output);
          }
          if (inputs.merge_vep_snvs_output !== null) {
              vep_output_folder.listing.push(inputs.merge_vep_snvs_output);
          }
          data_folder.listing = data_folder.listing.concat(outs.concat([pileup_folder, vep_output_folder]));
          for (var mm in maps) {
            output_map[mm.replace("output_|_output$", "")] = maps[mm];
          }
         return {
            output:     data_folder,
            output_map: output_map
          };
        }
  merge_log_files:
    doc: Merges logs of each step in a single folder.
    in:
      log_files:
        source:
          - pileup_normal/log_file
          - pileup_tumor/log_file
          - ethseq/log_files
          - spia/log_files
          - hsmetrics_normal/log_file
          - hsmetrics_tumor/log_file
          - mutect2/log_files
          - snvs_coverage/log_files
          - vep/log_file
          - merge_vep_snvs_coverage/log_file
          - cnvkit/log_files
          - clonet/log_file
          - tpes/log_files
        linkMerge: merge_flattened
      log_to_file: log_to_file
    out:
      - output
    run:
      class: ExpressionTool
      inputs:
        log_files:
          type:
            - type: array
              items:
                - "null"
                - "File"
            - "null"
        log_to_file: boolean
      outputs:
        output: Directory?
      expression: |
        ${
          var logs = null;
          if (inputs.log_to_file) {
            logs = {
              class: "Directory",
              basename: "logs",
              listing: inputs.log_files
            };
          }
          return {
            output: logs
          };
        }

$namespaces:
  sex_enum: "../types/sex_enum.yaml#"
  clonet_map: "../types/clonet_output_map.yaml#"
  cnvkit_map: "../types/cnvkit_output_map.yaml#"
  ethseq_map: "../types/ethseq_output_map.yaml#"
  hsmetrics_map: "../types/hsmetrics_output_map.yaml#"
  mutect2_map: "../types/mutect2_output_map.yaml#"
  snvs_coverage_map: "../types/snvs_coverage_output_map.yaml#"
  spia_map: "../types/spia_output_map.yaml#"
  tpes_map: "../types/tpes_output_map.yaml#"
  vep_map: "../types/vep_output_map.yaml#"
  out_map: "../types/pipeline_output_map.yaml#"
