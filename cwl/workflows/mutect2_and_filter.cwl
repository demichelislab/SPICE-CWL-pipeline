cwlVersion: v1.1
class: Workflow

doc: Runs mutect2 variant calling and and variant filter.

requirements:
  SchemaDefRequirement:
    types:
      - $import: "../types/mutect2_output_map.yaml"
  SubworkflowFeatureRequirement: {}
  InlineJavascriptRequirement: {}
  StepInputExpressionRequirement: {}
  MultipleInputFeatureRequirement: {}

inputs:
  bam_file_normal:
    doc: The BAM file of the normal sample.
    type: File
    secondaryFiles: [^.bai, .bai]
  bam_file_tumor:
    doc: The BAM file of the tumor sample.
    type: File
    secondaryFiles: [^.bai, .bai]
  reference_genome_fasta_file:
    doc: The file containing the reference genome in FASTA format.
    type: File
    secondaryFiles: [^.fai, .fai, ^.dict, .dict]
  kit_target_interval_file:
    doc: |-
      The interval list file containing the regions captured by the capture kit.
    type: File
  output_directory:
    doc: The name of the folder where the mutect2 output will be stored.
    type: string?
    default: "mutect2"
  log_to_file:
    doc: |-
      If true, the output generated by each tool will be redirected to a file.
      Otherwise the output will be printed on the output.
    type: boolean
    default: true

outputs:
  output:
    doc: The output directory produced by MuTect2.
    type: Directory?
    outputSource: merge_output/output
  output_map:
    doc: |-
      A data structure that will allow for easy access to the various outputs
      generated by MuTect2.
    type: out_map:mutect2_output_map?
    outputSource: merge_output/output_map
  log_files:
    doc: |-
      The log file, if enabled, that captures the output generated by each tool.
    type: File[]?
    outputSource:
      - mutect2/log_file
      - mutect2_filter/log_file

steps:
  gatk_sample_name:
    doc: |-
      Extracts the name present in the headers of the normal BAM file. Needed
      to specify the normal BAM file when running MuTect2.
    run: ../tools/gatk_sample_name.cwl
    in:
      bam_file: bam_file_normal
      log_to_file: log_to_file
    out:
      - output
      - log_file
  mutect2:
    doc: Calls somatic variants in the tumor sample using MuTect2.
    run: ../tools/mutect2.cwl
    in:
      bam_file_normal: bam_file_normal
      bam_file_tumor: bam_file_tumor
      normal_sample_name: gatk_sample_name/output
      reference_genome_fasta_file: reference_genome_fasta_file
      kit_target_interval_file: kit_target_interval_file
      log_to_file: log_to_file
    out:
      - output
      - log_file
  mutect2_filter:
    doc: Filters the raw somatic variants called by MuTect2.
    run: ../tools/mutect2_filter.cwl
    in:
      unfiltered_vcf_file: mutect2/output
      reference_genome_fasta_file: reference_genome_fasta_file
      kit_target_interval_file: kit_target_interval_file
      log_to_file: log_to_file
    out:
      - output
      - log_file
  merge_output:
    doc: Merges outputs of each step in a single output port and output_map.
    in:
      mutect2: mutect2/output
      mutect2_filter: mutect2_filter/output
      output_directory: output_directory
    out:
      - output
      - output_map
    run:
      class: ExpressionTool
      requirements:
        LoadListingRequirement:
          loadListing: shallow_listing
      inputs:
        mutect2: File?
        mutect2_filter: File?
        output_directory: string
      outputs:
        output: Directory?
        output_map: out_map:mutect2_output_map?
      expression: |
        ${
          var hasext_filt_fun = function (filt) { return function (ff) { return ff.nameext === filt }; },
              vcf_raw  = inputs.mutect2,
              vcf_pass = inputs.mutect2_filter,
              output_map = {
                vcf_raw_idx: inputs.mutect2.secondaryFiles.filter(hasext_filt_fun(".idx"))[0],
                vcf_raw_stats: inputs.mutect2.secondaryFiles.filter(hasext_filt_fun (".stats"))[0],
                vcf_pass_idx: inputs.mutect2_filter.secondaryFiles.filter(hasext_filt_fun(".idx"))[0]
              };
          delete vcf_raw["secondaryFiles"];
          delete vcf_pass["secondaryFiles"];
          output_map.vcf_raw = vcf_raw;
          output_map.vcf_pass = vcf_pass;
          return {
            output: {
              class: "Directory",
              basename: inputs.output_directory,
              listing: [
                inputs.mutect2,
                output_map.vcf_raw_idx,
                output_map.vcf_raw_stats,
                inputs.mutect2_filter,
                output_map.vcf_pass_idx
              ]
            },
            output_map: output_map
          };
        }

$namespaces:
  out_map: "../types/mutect2_output_map.yaml#"
